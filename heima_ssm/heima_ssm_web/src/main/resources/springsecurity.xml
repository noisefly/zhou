<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 配置不过滤的资源（静态资源及登录相关） -->
    <security:http security="none" pattern="/login.jsp" />
    <security:http security="none" pattern="/failer.jsp" />

    <security:http security="none" pattern="/css/**" />
    <security:http security="none" pattern="/img/**" />
    <security:http security="none" pattern="/plugins/**" />
    <security:http security="none" pattern="/images/**" />
    <security:http security="none" pattern="/js/**" />
    <security:http security="none" pattern="/favicon.ico"/>

    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式  -控制页面标签是否显示true-（没学习过）
    -->
    <security:http auto-config="true" use-expressions="false">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER 或者ADMIN的角色" -->
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN,ROLE_VIP"/>
        <!--<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_VIP')"/>-->

        <!-- 定义跳转的具体的页面 -->
        <security:form-login login-page="/login.jsp" login-processing-url="/login" authentication-failure-url="/failer.jsp"
                             default-target-url="/main.jsp" authentication-success-forward-url="/main.jsp"/>
        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>
        <!-- 退出 -->
        <security:logout invalidate-session="true"  logout-url="/logout" logout-success-url="/login.jsp" />
    </security:http>

    <!-- 不开启  use-expressions="true" (false) 的前提下 配置该bean -->
    <bean id="webexpressionHandler"
          class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"></bean>


    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userInfoService">
            <!-- 配置加密的方式 引入下面的配置类 -->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类  选1-->
    <!--<bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>-->

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
    <!-- 提供了入门的方式，在内存中存入用户名和密码 <security:authentication-manager><security:authentication-provider><security:user-service><security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/></security:user-service></security:authentication-provider></security:authentication-manager> -->

    <!--开启@Secured注解   方法访问权限控制  ****这个注解没生效 在web.xml配置-->
    <!--<security:global-method-security secured-annotations="enabled"/>-->

            <!--JSR-250注解-->
    <!--<security:global-method-security jsr250-annotations="enabled"/>-->


    <!--三种 基于方法 的权限控制 注解   同时使用时 必须在同一个标签中 -->
    <security:global-method-security jsr250-annotations="enabled" secured-annotations="enabled" pre-post-annotations="enabled"/>


</beans>
